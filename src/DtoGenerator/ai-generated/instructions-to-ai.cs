Write me an implementation of an IIncrementalGenerator that looks for types decorated with the GenerateDtoAttribute.  GenerateDtoAttribute takes zero, one, two, or three arguments.  The first is an enum called "dtoType" consisting of the options "Dto", "InsertDto," and "UpdateDto," which defaults to "Dto." The second is an enum called "typeType" consisting of the options "Class", "Struct,", "RecordClass," and "RecordStruct," which defaults to "RecordStruct."  The third is a string called "typeName," which defaults to the name of the type being decorated concatenated with the string form of the "dtoType."  And the fourth argument is a string called "@namespace," which defaults to the namespace of the type being decorated concatenated with ".Dtos."  It then generates code for the following:
 - A class, struct, record class, or record struct (depending on the value of the parameter "typeType") with the name "typeName," which contains all of the public gettable and settable properties in the type being decorated unless they are marked with an "IgnoreDtoPropertyAttribute" or the "KeyAttribute."  If the property is marked with the "KeyAttribute," the generator will also look for a "DatabaseGeneratedAttribute."  If there is one and its value is something other than "None" then it ignores the property; otherwise, the type being constructed will also contain the property decorated with the KeyAttribute.
 - An AutoMapper profile, declared in the namespace in the "@namespace" argument concatenated with ".AutoMapper," which maps the DTO type being generated both to and from the type being decorated.
 - GenerateDtoAttribute MAY NOT decorate an interface or an enum; it may only decorate classes and structs.
