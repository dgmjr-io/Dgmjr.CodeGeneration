namespace Dgmjr.CodeGeneration.CompileTimeComputation;

using System.Collections.Immutable;

using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

using static ThisAssembly.Info;

public static class Constants
{
    public const string CTCG002ErrorMessage =
        "The compile-time computed constant must be a primitive or string type and it must be constructible from a Func<T> delegate.  Found: {0} instead.";
    public const string CTCG001ErrorMessage =
        "Die zur Kompilierungszeit berechnete Konstante muss in einem statischen schreibgesch√ºtzten Feld definiert werden.  Habe stattdessen {0} gefunden.";

    public static readonly ImmutableArray<string> ValidNumericConstTypeNames = new[]
    {
        "int",
        "uint",
        "long",
        "ulong",
        "short",
        "ushort",
        "double",
        "float",
        "decimal",
        "nint",
        "nuint",
        nameof(Int32),
        nameof(UInt32),
        nameof(Int64),
        nameof(UInt64),
        nameof(Int16),
        nameof(UInt16),
        nameof(Double),
        nameof(Single),
        nameof(Decimal),
        nameof(IntPtr),
        nameof(UIntPtr)
    }.ToImmutableArray();
    public static readonly ImmutableArray<string> ValidConstTypeNames = ValidNumericConstTypeNames
        .Concat(new[] { "string" })
        .ToImmutableArray();

    public const string CompileTimeComputation = "CompileTimeComputationAttribute";
    public const string CompileTimeComputationOfT = $"{CompileTimeComputation}<T>";
    public const string AssemblyName = Title;
    public const string AssemblyVersion = FileVersion;
    public static readonly string Header =
        $@"/*
 *  <auto-generated>
 *     This file was generated by {AssemblyName}.
 *     Any changes made directly to this file will be lost when the code is regenerated.
 *  </auto-generated>
 *
 *  {{ filename }}.cs
 *     Generated: {DateTimeOffset.Now:yyyy-MM-dd HH:mm:ss}
 */
#nullable enable

using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Runtime.CompilerServices;
";

    public static readonly Scriban.Template HeaderTemplate = Scriban.Template.Parse(Header);

    public const string GeneratedCodeAttributes = $$$"""
    [CompilerGenerated]
    [GeneratedCodeAttribute("{{{AssemblyName}}}", "{{{AssemblyVersion}}}")]
    """;

    public static readonly AttributeListSyntax GeneratedCodeAttributesList =
        SyntaxFactory.AttributeList(
            SyntaxFactory.SeparatedList(
                CSharpSyntaxTree
                    .ParseText(GeneratedCodeAttributes)
                    .GetCompilationUnitRoot()
                    .ChildNodes()
                    .OfType<AttributeSyntax>()
            )
        );

    public const string CompileTimeComputationClassDeclaration = $$$"""
    {{{GeneratedCodeAttributes}}}
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property)]
    internal sealed class {{{CompileTimeComputation}}} : Attribute
    {
        public {{{CompileTimeComputation}}}(string name)
        {
            Name = name;
        }

        public string Name { get; }
    }
    """;
}
